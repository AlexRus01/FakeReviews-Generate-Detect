# -*- coding: utf-8 -*-
"""GenerateReviews.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L1e5TjQM3uI86EknYFGLd0kgQf3vpfZz
"""

# /colab/gen_emag_reviews.py

from google.colab import drive
drive.mount('/content/drive')

model_dir = "/content/drive/MyDrive/roGPT2-finetuned/checkpoint-1500"

!pip install -q transformers safetensors

from transformers import GPT2LMHeadModel, GPT2Tokenizer
import torch
import random
import csv

tokenizer = GPT2Tokenizer.from_pretrained(model_dir)
model = GPT2LMHeadModel.from_pretrained(model_dir)

prompts = [
    "Am cumpărat acest produs de pe eMAG și...",
    "Sunt foarte mulțumit de achiziție pentru că...",
    "Produsul a sosit rapid și...",
    "Nu mă așteptam la o calitate atât de...",
    "Îl folosesc de ceva timp și...",
    "Ambalajul a fost...",
    "Pentru prețul plătit, consider că...",
    "L-am comandat pentru părinți și...",
    "Comparativ cu alte produse similare...",
    "Recomand acest produs deoarece...",
    "Este a doua oară când îl cumpăr și...",
    "Funcționează exact cum mă așteptam...",
    "Livrarea prin eMAG a fost...",
    "Am primit produsul într-o stare...",
    "Raportul calitate/preț este...",
    "Nu mă așteptam să fie atât de...",
    "Produsul arată exact ca în poze și...",
    "Instrucțiunile din pachet au fost...",
    "Am testat produsul timp de o săptămână și...",
    "Culoarea, materialul și finisajul sunt...",
    "L-am luat în urma recenziilor bune și...",
    "Funcționează bine cu alte accesorii și...",
    "Se montează ușor și...",
    "Este ideal pentru...",
    "Merită fiecare leu pentru că...",
    "Designul este modern și...",
    "E prima dată când cumpăr de la acest brand și...",
    "Calitatea construcției este...",
    "Funcționalitățile oferite sunt...",
    "Îl recomand prietenilor pentru că..."
]

samples_per_prompt = 167
output_file = "/content/fake_emag_reviews.csv"

with open(output_file, mode='w', newline='', encoding='utf-8') as f:
    writer = csv.writer(f)
    writer.writerow(["Prompt", "GeneratedReview"])

    for prompt in prompts:
        for _ in range(samples_per_prompt):
            input_ids = tokenizer.encode(prompt, return_tensors='pt')
            attention_mask = input_ids.ne(tokenizer.pad_token_id).long()

            output = model.generate(
                input_ids=input_ids,
                attention_mask=attention_mask,
                max_length=80,
                do_sample=True,
                top_k=50,
                top_p=0.95,
                temperature=0.9,
                pad_token_id=tokenizer.eos_token_id
            )

            text = tokenizer.decode(output[0], skip_special_tokens=True)
            writer.writerow([prompt, text])

print("Output:", output_file)